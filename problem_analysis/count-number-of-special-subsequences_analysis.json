{
  "problem_name": "count-number-of-special-subsequences",
  "data_structures": [
    [
      "array",
      "dp array"
    ]
  ],
  "category": "1-D Dynamic Programming",
  "algorithm_technique": [
    "Dynamic programming to count subsequences ending with 0, 1, or 2."
  ],
  "problem_summary_simple": "Count special subsequences (0s then 1s then 2s) in an array.",
  "problem_summary_technical": "Use DP where dp[i] stores the count of special subsequences ending with digit i, updating based on previous states and current element.",
  "time_complexity": [
    "O(n)"
  ],
  "space_complexity": [
    "O(1)"
  ],
  "key_insights": [
    [
      "The problem can be solved using dynamic programming by keeping track of the counts of subsequences ending in 0, 1, and 2.",
      "Let `dp[0]` be the count of subsequences ending in 0, `dp[1]` ending in 1, and `dp[2]` ending in 2.",
      "When encountering a `0`: `dp[0] = (2 * dp[0] + 1) % MOD` (double existing 0s, add new 0).",
      "When encountering a `1`: `dp[1] = (2 * dp[1] + dp[0]) % MOD` (double existing 1s, add 0s followed by 1).",
      "When encountering a `2`: `dp[2] = (2 * dp[2] + dp[1]) % MOD` (double existing 2s, add 1s followed by 2)."
    ]
  ],
  "difficulty_level": "Medium",
  "analysis_timestamp": "2025-07-16 21:36:57",
  "batch_processed": true,
  "batch_size": 5
}