{
  "problem_name": "count-square-sum-triples",
  "data_structures": [
    [
      "set"
    ]
  ],
  "category": "Math & Geometry",
  "algorithm_technique": [
    "Brute-force iteration with hash set for efficient lookup"
  ],
  "problem_summary_simple": "Find Pythagorean triples (a, b, c) where a^2 + b^2 = c^2 and all numbers are between 1 and n.",
  "problem_summary_technical": "Iterate through possible values of 'a' and 'b', calculate a^2 + b^2, and check if the result is a perfect square within the range [1, n] using a precomputed set.",
  "time_complexity": [
    "O(n^2)"
  ],
  "space_complexity": [
    "O(n)"
  ],
  "key_insights": [
    [
      "The problem asks for Pythagorean triples (a, b, c) where 1 <= a, b, c <= n.",
      "A naive approach would be O(n^3) by iterating through a, b, and c. This solution optimizes by pre-calculating squares up to n and storing them in a set for O(1) lookup.",
      "By iterating through 'a' and 'b' and checking if `a^2 + b^2` is in the set of squares, we reduce the complexity to O(n^2)."
    ]
  ],
  "difficulty_level": "Easy",
  "analysis_timestamp": "2025-07-16 21:37:37",
  "batch_processed": true,
  "batch_size": 5
}