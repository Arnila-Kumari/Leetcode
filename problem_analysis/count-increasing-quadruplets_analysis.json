{
  "problem_name": "count-increasing-quadruplets",
  "data_structures": [
    [
      "array",
      "integer variables"
    ],
    [
      "2D array",
      "integer variables"
    ],
    [
      "2D array",
      "2D array",
      "integer variables"
    ]
  ],
  "category": "1-D Dynamic Programming",
  "algorithm_technique": [
    "Dynamic programming to count valid triplets ending at index k, then extend to quadruplets.",
    "Prefix sums to count elements smaller/larger than a pivot on either side.",
    "Prefix sums to count elements smaller/larger than a pivot on either side, optimized."
  ],
  "problem_summary_simple": "Count quadruplets (i, j, k, l) where indices and values are strictly increasing in a specific pattern.",
  "problem_summary_technical": "Find quadruplets (i, j, k, l) such that i < j < k < l and nums[i] < nums[k] < nums[j] < nums[l].",
  "time_complexity": [
    "O(n^2)",
    "O(n^2)",
    "O(n^2)"
  ],
  "space_complexity": [
    "O(n)",
    "O(n^2)",
    "O(n^2)"
  ],
  "key_insights": [
    [
      "The condition nums[i] < nums[k] < nums[j] < nums[l] is key.",
      "Breaking down the problem into counting smaller sub-problems (triplets) is effective.",
      "Prefix sums or DP can efficiently count elements satisfying conditions on either side of a pivot."
    ],
    [
      "The condition nums[i] < nums[k] < nums[j] < nums[l] is key.",
      "Breaking down the problem into counting smaller sub-problems (triplets) is effective.",
      "Prefix sums can efficiently count elements satisfying conditions on either side of a pivot."
    ],
    [
      "The condition nums[i] < nums[k] < nums[j] < nums[l] is key.",
      "Breaking down the problem into counting smaller sub-problems (triplets) is effective.",
      "Prefix sums can efficiently count elements satisfying conditions on either side of a pivot."
    ]
  ],
  "difficulty_level": "Medium",
  "analysis_timestamp": "2025-07-16 21:36:36",
  "batch_processed": true,
  "batch_size": 5
}