{
  "problem_name": "sorting-three-groups",
  "data_structures": [
    [
      "array"
    ]
  ],
  "category": "1-D Dynamic Programming",
  "algorithm_technique": [
    "Dynamic programming to count longest non-decreasing subsequence of specific groups."
  ],
  "problem_summary_simple": "Remove minimum elements from an array of 1s, 2s, and 3s to make it non-decreasing.",
  "problem_summary_technical": "Find the longest non-decreasing subsequence using DP. The state represents the count of elements of each group in the subsequence.",
  "time_complexity": [
    "O(n)"
  ],
  "space_complexity": [
    "O(1)"
  ],
  "key_insights": [
    [
      "The problem can be rephrased as finding the longest non-decreasing subsequence where elements are grouped (1s, then 2s, then 3s).",
      "A DP approach can track the maximum length of such a subsequence ending with a certain group.",
      "The number of operations is the total length minus the length of the longest valid subsequence."
    ]
  ],
  "difficulty_level": "Medium",
  "analysis_timestamp": "2025-07-16 22:09:57",
  "batch_processed": true,
  "batch_size": 5
}