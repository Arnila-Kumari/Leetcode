{
  "problem_name": "one-edit-distance",
  "data_structures": [
    [
      "string"
    ]
  ],
  "category": "Two Pointers",
  "algorithm_technique": [
    "Two pointers to compare strings and handle insertion/deletion/replacement cases."
  ],
  "problem_summary_simple": "Check if two strings are exactly one edit (insert, delete, replace) away from each other.",
  "problem_summary_technical": "Compares strings using two pointers, accounting for length differences to detect single insertion, deletion, or replacement.",
  "time_complexity": [
    "O(m + n)"
  ],
  "space_complexity": [
    "O(1)"
  ],
  "key_insights": [
    [
      "The problem can be simplified by ensuring the shorter string is always `s` and the longer is `t`.",
      "The difference in lengths (`n - m`) directly tells us if it's a potential insertion/deletion or replacement.",
      "Two pointers are used to find the first differing character, and then the rest of the strings are compared based on the length difference."
    ]
  ],
  "difficulty_level": "Medium",
  "analysis_timestamp": "2025-07-16 22:03:36",
  "batch_processed": true,
  "batch_size": 5
}