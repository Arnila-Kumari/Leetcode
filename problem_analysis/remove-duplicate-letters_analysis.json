{
  "problem_name": "remove-duplicate-letters",
  "data_structures": [
    [
      "string",
      "hashmap",
      "set",
      "stack"
    ]
  ],
  "category": "Stack",
  "algorithm_technique": [
    "Use a stack to build the result. Iterate through the string, if a character is not in the stack, pop larger characters from the stack if they appear later in the string."
  ],
  "problem_summary_simple": "Remove duplicate letters from a string to get the lexicographically smallest result with all unique characters.",
  "problem_summary_technical": "Employ a stack-based greedy approach. Maintain character counts and a set of characters in the stack to ensure uniqueness and lexicographical order.",
  "time_complexity": [
    "O(N)"
  ],
  "space_complexity": [
    "O(K)"
  ],
  "key_insights": [
    [
      "The core idea is to maintain a monotonically increasing subsequence in the stack, considering future occurrences of characters.",
      "A character can be popped from the stack only if it appears later in the string, allowing us to replace it with a smaller character."
    ],
    [
      "The `remaining` counter is crucial for knowing if a character can be safely removed from the stack."
    ]
  ],
  "difficulty_level": "Medium",
  "analysis_timestamp": "2025-07-16 22:06:32",
  "batch_processed": true,
  "batch_size": 5
}