{
  "problem_name": "distinct-subsequences",
  "data_structures": [
    [
      "list"
    ]
  ],
  "category": "1-D Dynamic Programming",
  "algorithm_technique": [
    "Dynamic programming with space optimization"
  ],
  "problem_summary_simple": "Count how many times string t appears as a subsequence in string s.",
  "problem_summary_technical": "DP approach to count distinct subsequences of s matching t, using O(m) space where m is length of t.",
  "time_complexity": [
    "O(n*m)"
  ],
  "space_complexity": [
    "O(m)"
  ],
  "key_insights": [
    [
      "The DP state dp[j] represents the number of distinct subsequences of s[:i] that equal t[:j].",
      "When s[i] == t[j], we add dp[j-1] (ways to form t[:j-1]) to dp[j].",
      "Space optimization reduces the DP table from O(n*m) to O(m)."
    ]
  ],
  "difficulty_level": "Medium",
  "analysis_timestamp": "2025-07-16 21:40:49",
  "batch_processed": true,
  "batch_size": 5
}