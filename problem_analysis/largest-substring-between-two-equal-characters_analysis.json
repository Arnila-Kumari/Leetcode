{
  "problem_name": "largest-substring-between-two-equal-characters",
  "data_structures": [
    [
      "hashmap"
    ]
  ],
  "category": "Arrays & Hashing",
  "algorithm_technique": [
    "hashmap for first occurrence tracking"
  ],
  "problem_summary_simple": "Find the longest substring between two identical characters, excluding those characters.",
  "problem_summary_technical": "Use a hashmap to store the first index of each character. Calculate the substring length between the current index and the first occurrence.",
  "time_complexity": [
    "O(n)"
  ],
  "space_complexity": [
    "O(1)"
  ],
  "key_insights": [
    [
      "The goal is to maximize `current_index - first_occurrence_index - 1`.",
      "A hashmap is ideal for storing the first seen index of each character.",
      "Iterate through the string, and for each character, if it's already in the map, calculate the potential substring length and update the maximum.",
      "If the character is not in the map, store its current index as its first occurrence."
    ]
  ],
  "difficulty_level": "Easy",
  "analysis_timestamp": "2025-07-16 21:48:37",
  "batch_processed": true,
  "batch_size": 5
}