{
  "problem_name": "campus-bikes",
  "data_structures": [
    [
      "list",
      "heap (priority queue)",
      "set"
    ]
  ],
  "category": "Heap / Priority Queue",
  "algorithm_technique": [
    "Greedy with Priority Queue: calculate all distances, store them in a priority queue, and assign bikes based on smallest distance, then worker/bike index."
  ],
  "problem_summary_simple": "Assign bikes to workers based on shortest Manhattan distance, breaking ties by worker and then bike index.",
  "problem_summary_technical": "Calculates all worker-bike Manhattan distances, uses a min-heap to greedily assign the closest available pair, respecting tie-breaking rules.",
  "time_complexity": [
    "O((w * b) * log(w * b))"
  ],
  "space_complexity": [
    "O(w * b)"
  ],
  "key_insights": [
    [
      "The problem requires finding the minimum distance pair repeatedly, suggesting a priority queue.",
      "The priority queue should store tuples of (distance, worker_index, bike_index) to handle tie-breaking.",
      "A set is needed to keep track of assigned bikes to avoid reassigning them.",
      "The initial population of the heap can be optimized by only pushing the smallest distance for each worker."
    ]
  ],
  "difficulty_level": "Medium",
  "analysis_timestamp": "2025-07-16 21:33:34",
  "batch_processed": true,
  "batch_size": 5
}