{
  "problem_name": "number-of-self-divisible-permutations",
  "data_structures": [
    [
      "2D boolean array (lookup)",
      "1D DP array",
      "bitmask"
    ]
  ],
  "category": "Bit Manipulation",
  "algorithm_technique": [
    "Dynamic programming with bitmasking to build permutations and check divisibility constraints."
  ],
  "problem_summary_simple": "Count permutations of 1 to n where each element is coprime to its index.",
  "problem_summary_technical": "Use DP with bitmasks. `dp[mask]` stores the count of valid permutations for numbers represented by the set bits in `mask`. Transition checks `gcd(num, index) == 1`.",
  "time_complexity": [
    "O(n * 2^n)"
  ],
  "space_complexity": [
    "O(2^n)"
  ],
  "key_insights": [
    [
      "The problem can be modeled as finding valid assignments of numbers to positions.",
      "Bitmask DP is suitable because `n` is small (<= 12), allowing states to represent subsets of numbers used.",
      "The state `dp[mask]` represents the number of valid partial permutations using numbers indicated by the set bits in `mask`."
    ]
  ],
  "difficulty_level": "Medium",
  "analysis_timestamp": "2025-07-16 22:02:32",
  "batch_processed": true,
  "batch_size": 5
}