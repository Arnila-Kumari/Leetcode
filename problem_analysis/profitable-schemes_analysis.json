{
  "problem_name": "profitable-schemes",
  "data_structures": [
    [
      "2D array (DP table)"
    ]
  ],
  "category": "1-D Dynamic Programming",
  "algorithm_technique": [
    "Dynamic Programming: DP state represents (profit, members), transitions consider including or excluding a crime."
  ],
  "problem_summary_simple": "Count ways to choose crimes to meet minimum profit and member limits.",
  "problem_summary_technical": "DP state dp[p][m] counts schemes for profit p using m members. Transitions update states based on crime requirements and profits.",
  "time_complexity": [
    "O(n * P * G)"
  ],
  "space_complexity": [
    "O(P * G)"
  ],
  "key_insights": [
    [
      "The problem can be modeled as a 0/1 knapsack variation where items are crimes.",
      "The DP state needs to track both achieved profit and members used.",
      "Iterating profit and group counts in reverse order prevents using a crime multiple times within the same DP update."
    ]
  ],
  "difficulty_level": "Medium",
  "analysis_timestamp": "2025-07-16 22:05:26",
  "batch_processed": true,
  "batch_size": 5
}