{
  "problem_name": "search-in-rotated-sorted-array-ii",
  "data_structures": [
    [
      "list"
    ]
  ],
  "category": "Binary Search",
  "algorithm_technique": [
    "Modified Binary Search to handle duplicates by advancing the left pointer when nums[mid] == nums[left]."
  ],
  "problem_summary_simple": "Find a target in a sorted array with duplicates that has been rotated at an unknown pivot.",
  "problem_summary_technical": "Use binary search on a rotated sorted array with duplicates, carefully handling `nums[mid] == nums[left]` to avoid infinite loops.",
  "time_complexity": [
    "O(log n) on average, O(n) in worst case (all duplicates)"
  ],
  "space_complexity": [
    "O(1)"
  ],
  "key_insights": [
    [
      "Duplicates introduce ambiguity: `nums[mid] == nums[left]` doesn't tell us which side is sorted.",
      "When `nums[mid] == nums[left]`, we can safely increment `left` because `nums[left]` is not the target (if it were, `nums[mid]` would also be the target).",
      "The worst-case O(n) occurs when all elements are the same, and we might have to check each one."
    ]
  ],
  "difficulty_level": "Medium",
  "analysis_timestamp": "2025-07-16 22:07:58",
  "batch_processed": true,
  "batch_size": 5
}